name: .NET Core NUnit Tests CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install xmlstarlet
      run: sudo apt-get update && sudo apt-get install -y xmlstarlet

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore


    - name: Update version number
      run: |
        pwd
        ls -la
        # Get the current version number from the csproj file
        CURRENT_VERSION=$(xmlstarlet sel -t -v "//Project/PropertyGroup/PackageVersion" ./UpInfo78/UpInfo78.csproj)
        
        # Split the version number into an array
        IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
        
        # Increment the last part of the version number
        PATCH_VERSION=$((VERSION_PARTS[3] + 1))
        
        # Construct the new version number
        NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}.${PATCH_VERSION}"
        
        # Update the csproj file with the new version number
        xmlstarlet ed -L -u "//Project/PropertyGroup/PackageVersion" -v "$NEW_VERSION" ./UpInfo78/UpInfo78.csproj
        
        # Output the new version number for debugging
        echo "New version number: $NEW_VERSION"

    - name: Build UpInfo78 project
      run: dotnet build ./UpInfo78/UpInfo78.csproj --configuration Release

    - name: Create Test Results Directory
      run: mkdir -p ./test/TestResults

    - name: Run NUnit tests
      run: dotnet test ./test/Test.csproj --no-build --logger "trx;LogFileName=testresults.trx" --results-directory ./test/TestResults

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: './test/TestResults/*.trx'
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



    - name: Pack project
      run: dotnet pack ./UpInfo78/UpInfo78.csproj --output ./artifacts --include-symbols --no-build

    - name: Publish to NuGet
      run: |
        dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        dotnet nuget push ./artifacts/*.symbols.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

    - name: List files in artifacts directory
      run: ls -la ./artifacts